<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Javascript on 記事本</title>
    <link>https://littlebees.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on 記事本</description>
    <image>
      <title>記事本</title>
      <url>https://littlebees.github.io/images/papermod-cover.png</url>
      <link>https://littlebees.github.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.125.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Jan 2022 10:59:14 +0000</lastBuildDate>
    <atom:link href="https://littlebees.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在javascript做deep copy?</title>
      <link>https://littlebees.github.io/2022/01/%E5%9C%A8javascript%E5%81%9Adeep-copy/</link>
      <pubDate>Mon, 17 Jan 2022 10:59:14 +0000</pubDate>
      <guid>https://littlebees.github.io/2022/01/%E5%9C%A8javascript%E5%81%9Adeep-copy/</guid>
      <description>&lt;h2 id=&#34;動機&#34;&gt;動機&lt;/h2&gt;
&lt;p&gt;當你以為deep copy是正常的builtin時，Javascript總是能給你驚喜&lt;/p&gt;</description>
    </item>
    <item>
      <title>改Manga-Loader的心得與一些方法</title>
      <link>https://littlebees.github.io/2021/06/%E6%94%B9manga-loader%E7%9A%84%E5%BF%83%E5%BE%97%E8%88%87%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 09 Jun 2021 22:46:35 +0000</pubDate>
      <guid>https://littlebees.github.io/2021/06/%E6%94%B9manga-loader%E7%9A%84%E5%BF%83%E5%BE%97%E8%88%87%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h2 id=&#34;動機&#34;&gt;動機&lt;/h2&gt;
&lt;p&gt;manga loader是神器，來試著加加新的網站&lt;/p&gt;</description>
    </item>
    <item>
      <title>js的proto與metaclass</title>
      <link>https://littlebees.github.io/2021/02/js%E7%9A%84proto%E8%88%87metaclass/</link>
      <pubDate>Mon, 01 Feb 2021 23:39:47 +0000</pubDate>
      <guid>https://littlebees.github.io/2021/02/js%E7%9A%84proto%E8%88%87metaclass/</guid>
      <description>&lt;h2 id=&#34;動機&#34;&gt;動機&lt;/h2&gt;
&lt;p&gt;之前在看js的proto時，突然想起之前看的metaclass&lt;/p&gt;</description>
    </item>
    <item>
      <title>await 與 async 與 promise</title>
      <link>https://littlebees.github.io/2020/12/await-%E8%88%87-async-%E8%88%87-promise/</link>
      <pubDate>Sat, 26 Dec 2020 20:21:51 +0000</pubDate>
      <guid>https://littlebees.github.io/2020/12/await-%E8%88%87-async-%E8%88%87-promise/</guid>
      <description>動機 想到就來寫一寫
promise is monad promise是從callback hell來的，而每個callback都有接callback的變數，所以可以用之前寫過的方式來把它簡化
最後拿到的就是promise
await is bind &amp;amp; async is return 在monad中 return 是 讓一個值變成monad 而 bind 是從monad中取值，再包成monad
對應到 Promise就是
then(() =&amp;gt; {}): bind Promise.resolve(val): return 但是寫Promise.resolve(val)配function有點長，所以有了async 寫then((x) =&amp;gt; { return x})只是為了取個值也很煩，所以有了await
從promise到await 正常的code
let a = 1 let b = 2 let c = 3 return a+b+c 包成callback
(a) =&amp;gt; { return (a,b) =&amp;gt; { return (a,b,c) =&amp;gt; { return a+b+c }(1,2,3); }(1,2); }(1); // OR (a) =&amp;gt; { return (b) =&amp;gt; { return (c) =&amp;gt; { return a+b+c }(3); }(2); }(1); 用promise來寫，因為then之間的context不能共享，所以會變得很難看</description>
    </item>
    <item>
      <title>有趣與有用的es6特性</title>
      <link>https://littlebees.github.io/2020/05/%E6%9C%89%E8%B6%A3%E8%88%87%E6%9C%89%E7%94%A8%E7%9A%84es6%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 04 May 2020 23:54:10 +0000</pubDate>
      <guid>https://littlebees.github.io/2020/05/%E6%9C%89%E8%B6%A3%E8%88%87%E6%9C%89%E7%94%A8%E7%9A%84es6%E7%89%B9%E6%80%A7/</guid>
      <description>下面是個人比較喜歡的es6的新特性
終於來了!! Template Literals `Fifteen is ${a + b} and not ${2 * a + b}.` Arrow Functions function Person() { this.age = 0; // var self = this; // 定義該 Arrow Functions 時的環境，是在 Person 物件中 setInterval(() =&amp;gt; { // 所以 this 會正確指向 Person 物件 this.age++; //self.age++ }, 1000); } var p = new Person(); class syntax sugar class Animal { constructor(name) { this.name = name; } speak() { console.log(this.name + &amp;#39; makes a noise.</description>
    </item>
    <item>
      <title>JS一些概念的整理</title>
      <link>https://littlebees.github.io/2020/04/js%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E7%9A%84%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 21 Apr 2020 23:35:12 +0000</pubDate>
      <guid>https://littlebees.github.io/2020/04/js%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5%E7%9A%84%E6%95%B4%E7%90%86/</guid>
      <description>hoisting console.log(a) var a = 10 會變成類似(會說是類似，因為底層不一定是這樣做)
var a console.log(a) a = 10 可以把他
var a = &amp;#39;1&amp;#39; // A... var b = 2 // B ... var c 想像成這樣
function whatever(a,b,c) { // A ... // B ... }(&amp;#39;1&amp;#39;,1,undefined); 如果有let
var a = &amp;#39;1&amp;#39; function x() { // a ... let a = 2 } 先想像成
function whatever(a) { function x() { // a ... let a = 2 // b .</description>
    </item>
  </channel>
</rss>
